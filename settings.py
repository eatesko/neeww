"""
Django settings for Tesiz project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
from decouple import config

from django.contrib.messages import constants as messages

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('secret_key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

API_SLYDEPAY_MERCHANT_EMAIL = "tesisgh@gmail.com"
API_SLYDEPAY_MERCHANT_KEY = "1536337905788"
API_SLYDEPAY_INTEGRATION_MODE = 1
API_SLYDEPAY_REDIRECT_URL= "https://app.slydepay.com.gh/paylive/detailsnew.aspx?pay_token="
API_SLYDEPAY_WSDL = "https://app.slydepay.com.gh/webservices/paymentservice.asmx?wsdl"
API_SLYDEPAY_NAMESPACE = "http://www.i-walletlive.com/payLIVE"
API_SLYDEPAY_SERVICE_TYPE = "C2B"
API_SLYDEPAY_VERSION = 1.0
UNIT_PRICE = 1.0

#Twilio Credentials



EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_HOST_USER = config('email_host_user')
EMAIL_HOST_PASSWORD = config('email_host_password')
EMAIL_PORT = 587

# Application definition
INSTALLED_APPS = [
    'tesis_celery.apps.TesisCeleryConfig',
    'users.apps.UsersConfig',
    'surveys.apps.SurveysConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

AUTH_USER_MODEL = 'users.MyUser'

#BROKER_URL = 'amqp://tesko:justdoit@localhost:5672//Tesis2'

#broker_url = 'amqp://tesko:justdoit@localhost:5672/Tesis2'


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Tesiz.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

WSGI_APPLICATION = 'Tesiz.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
# Heroku: Update database configuration from $DATABASE_URL.
"""import dj_database_url

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('name'),
        'USER': config('user'),
        'PASSWORD': config('password'),
        'HOST': 'localhost',
        'PORT': '',
    }
}

db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(db_from_env)"""
if DEBUG:
    ALLOWED_HOSTS = ["localhost"]

    MEDIA_ROOT = os.path.join(BASE_DIR, 'csv')

    STATIC_ROOT = os.path.join(BASE_DIR, '/static/')

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': 'mydatabase',
        }
    }
else:
    ALLOWED_HOSTS = [".tesiz.com"]

    MEDIA_ROOT = os.path.join(BASE_DIR, '/public/csv/')

    STATIC_ROOT = os.path.join(BASE_DIR, '/public/static/')

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': config('name'),
            'USER': config('user'),
            'PASSWORD': config('password'),
            'HOST': 'mysql.tesiz.com',
            'PORT': '3306',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


MEDIA_URL = '/csv/'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

# The URL to use when referring to static files (where they will be served from)
STATIC_URL = '/static/'

# The absolute path to the directory where collectstatic will collect static files for deployment.

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/
#STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

LOGIN_URL = 'users:login'
